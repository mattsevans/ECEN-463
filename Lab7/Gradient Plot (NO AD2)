# -*- coding: utf-8 -*-
"""
Created on Thu Oct 30 15:52:21 2025

@author: 32dir
"""

'''
Starting code for the Waveforms SDK.    MR Engineering Class
Lab 2 Example 2
Note:  Pin 0 is set to be an external scope trigger
       Pin 4 is connected to external trigger input 1,  to trigger the AD2 digitizer
'''

from dwfconstants import *

import sys
import matplotlib.pyplot as plt
import numpy as np
import time
from datetime import datetime
from scipy.fft import fft, fftfreq, fftshift
from scipy import signal


##   Hide the SDK functions by left click next to the if statement
import_mre_functions = 1
if import_mre_functions == 1:
    
  
    def set_dio(ChNum,totalCycles,low,high):
        #   The DIO can be set by the number of cycles low, then high, and then low again. 
        #   Input values are in seconds, then converted to cycles assuming 1 clock cycle/ 10 microseconds.  
        DIOLow1 = int(low * 10**5)
        DIOHigh = int(high * 10**5)
        DIOLow2 = int(totalCycles - DIOHigh - DIOLow1)
        dwf.FDwfDigitalOutEnableSet(hdwf, c_int(ChNum), c_int(1))
        dwf.FDwfDigitalOutDividerSet(hdwf, c_int(ChNum), c_int(int(hzSys.value / 100000)))
        dwf.FDwfDigitalOutCounterSet(hdwf, c_int(ChNum), c_int(DIOLow2), c_int(DIOHigh))
        dwf.FDwfDigitalOutCounterInitSet(hdwf, c_int(ChNum), c_int(0), c_int(DIOLow1))
        dwf.FDwfDigitalOutIdleSet(hdwf, c_int(ChNum), DwfDigitalOutIdleLow)
        return 
    
    def set_scope(sampFreq,numSamp,acqTime,Delay):
        dwf.FDwfAnalogInAcquisitionModeSet(hdwf, acqmodeSingle)  # set to a single acquisition
        dwf.FDwfAnalogInFrequencySet(hdwf, c_double(sampFreq))  # sets up the frequency
        dwf.FDwfAnalogInBufferSizeSet(hdwf, c_int(numSamp))  # sets the buffer
        dwf.FDwfAnalogInChannelEnableSet(hdwf, c_int(0), c_bool(True))  # enables channel 0
        dwf.FDwfAnalogInChannelEnableSet(hdwf, c_int(1), c_bool(False))  # disable  channel 1
        dwf.FDwfAnalogInChannelRangeSet(hdwf, c_int(-1), c_double(5))  # sets the range
        ##set to decimate
        dwf.FDwfAnalogInChannelFilterSet(hdwf, c_int(-1), filterDecimate)   
        dwf.FDwfAnalogInTriggerSourceSet(hdwf, trigsrcExternal1)  # sets the trigger source
        dwf.FDwfAnalogInTriggerConditionSet(hdwf, DwfTriggerSlopeRise)
        dwf.FDwfAnalogInTriggerPositionSet(hdwf, c_double(acqTime / 2 + Delay) ) # sets the trigger position
        y = 0
        return y
    
    def set_wavegen(ChNum,freq,amplitude,pulseL,pd,Nreps):
        dwf.FDwfAnalogOutNodeEnableSet(hdwf, c_int(ChNum), AnalogOutNodeCarrier, c_bool(True))
        dwf.FDwfAnalogOutNodeFunctionSet(hdwf, c_int(ChNum), AnalogOutNodeCarrier, funcSine)  # Function
        dwf.FDwfAnalogOutNodeFrequencySet(hdwf, c_int(ChNum), AnalogOutNodeCarrier, c_double(freq))  # frequency
        dwf.FDwfAnalogOutNodeAmplitudeSet(hdwf, c_int(ChNum), AnalogOutNodeCarrier, c_double(amplitude))  # Amplitude
        dwf.FDwfAnalogOutRunSet(hdwf, c_int(ChNum), c_double(pulseL))  # run time
        dwf.FDwfAnalogOutWaitSet(hdwf, c_int(ChNum), c_double(pd))  # wait time
        dwf.FDwfAnalogOutRepeatSet(hdwf, c_int(ChNum), c_int(Nreps))  # repetitions
#        dwf.FDwfAnalogOutTriggerSourceSet(hdwf, c_int(ChNum), trigsrcExternal1)  # sets the trigger source        
        dwf.FDwfAnalogOutTriggerSourceSet(hdwf, c_int(ChNum), trigsrcDigitalOut)  # sets the trigger source
        y = 0
        return y   
    
    def set_wavegen_arbitrary(amplitude,frequency,ChNum,delay,duration,Nreps,rgdSamples):
        dwf.FDwfAnalogOutNodeEnableSet(hdwf,c_int(ChNum),AnalogOutNodeCarrier,c_bool(True)) 
        dwf.FDwfAnalogOutNodeFunctionSet(hdwf,c_int(ChNum),AnalogOutNodeCarrier,funcCustom) #Function
        dwf.FDwfAnalogOutNodeDataSet(hdwf,c_int(ChNum),AnalogOutNodeCarrier,rgdSamples,c_int(len(rgdSamples)))
        dwf.FDwfAnalogOutNodeFrequencySet(hdwf,c_int(ChNum),AnalogOutNodeCarrier,c_double(frequency)) # frequency
        dwf.FDwfAnalogOutNodeAmplitudeSet(hdwf,c_int(ChNum),AnalogOutNodeCarrier,c_double(amplitude)) #Amplitude
        dwf.FDwfAnalogOutRunSet(hdwf,c_int(ChNum),c_double(duration)) # run time
        dwf.FDwfAnalogOutWaitSet(hdwf,c_int(ChNum),c_double(delay)) # wait time
        dwf.FDwfAnalogOutRepeatSet(hdwf,c_int(ChNum),c_int(Nreps)) #repetitions
        dwf.FDwfAnalogOutTriggerSourceSet(hdwf,c_int(ChNum),trigsrcDigitalOut)
        y = 0
        return y

    def set_pos_powersupply(Voltage):
        dwf.FDwfAnalogIOChannelNodeSet(hdwf, c_int(0), c_int(0), c_double(True))  # enable positive supply
        dwf.FDwfAnalogIOChannelNodeSet(hdwf, c_int(0), c_int(1), c_double(Voltage))  # set voltage to 5 V
        dwf.FDwfAnalogIOEnableSet(hdwf, c_int(True))  # master enable
        y = 0
        return y
 
    def arm_dio(totalTime):
        # Finishing setting up the DIO pins.
        dwf.FDwfDigitalOutRunSet(hdwf, c_double(totalTime))
        dwf.FDwfDigitalOutWaitSet(hdwf, c_double(0))
        dwf.FDwfDigitalOutRepeatSet(hdwf, c_int(1))
        y = 0
        return y
    
    def trigger_and_read_ch0(rgdSamples,numSamp):
        dwf.FDwfDigitalOutConfigure(hdwf, c_int(1))
        while True:
            dwf.FDwfAnalogInStatus(hdwf, c_int(1), byref(sts))
            if sts.value == DwfStateDone.value:
                break
        dwf.FDwfAnalogInStatusData(hdwf, 0, rgdSamples, numSamp)  # get channel 1 data
        # dwf.FDwfAnalogInStatusData(hdwf, 1, rgdSampless, 8192) # get channel 2 data
        y = 0
        return y
    
    def arm_analog():
        dwf.FDwfAnalogInConfigure(hdwf, c_int(1), c_int(1))
        dwf.FDwfAnalogOutConfigure(hdwf, c_int(0), c_bool(True))
        dwf.FDwfAnalogOutConfigure(hdwf, c_int(1), c_bool(True))
        y = 0
        return y
    
    def set_ad2_device(idevice):
        dwf.FDwfEnumDeviceName(c_int(idevice), devicename)
        dwf.FDwfEnumSN(c_int(idevice), serialnum)
        hdwf.value = rghdwf[idevice]
        y = 0
        return y
    
    def reset_and_close():
        dwf.FDwfDigitalIOReset()
        dwf.FDwfDeviceCloseAll()
        y = 0
        return y

num_avg = 16
f_start = 3.35*10**6
f_stop = 3.39*10**6
step = 1000
num_freq = (int((f_stop - f_start) / step)) + 1
f_range = np.linspace(f_start, f_stop, num_freq)
amplitude = 5   # voltage 
AD2_volts = .5
Tp = .0002   ## Pulse length in seconds
TE = .015  #.013   #ADD TE and set it to 10 milliseconds
predelay = .004    #### TE is 10  #length before a pulse is fired in seconds. for each pulse
Npulse = 2         # how many pulses to play out
sampFreq = 10**6
Tacq =  6.4*10**-3   # orginally .007
numSamp =  int(Tacq * sampFreq) #8192
Trig_AD2 = TE - Tacq/2   #  trigger the AD2 digitizer 2 msec after the start
LO_start = Trig_AD2 - 0.001
tLO = Tacq + 0.002
SeqTime = .04    # duration that will encompass a single pulse sequence
DIO_rate = 10**5  # effective clock rate of the digital i/O
totalCycles = SeqTime*DIO_rate
IF = 100000
FOV = 20  #in mm (2 cm)
num_points = 64
scale_factor = 1.0    # this is relating gradient pulse to dephasing

att_start = 0.003
att_end = 0.005  ## 0.0031

T_R = 0.0065 # 0.1    # this is the T/R switch 
TR = 0.25     # this is the repetion time
gradient_system = 0.5 # this is in G/cm per amp

# gradient stuff
grad_ramp = 0.0005   
grad_hold = Tacq
dephasing_t = Tacq/2
grad_amp = 1.0

#conversion factor
G_cm = ((AD2_volts * 11) / 8)  # G/cm
#determining strength of gradience
frequency_per_point = 1/Tacq   
resolution = FOV / num_points
grad_strength = frequency_per_point /resolution   # Hz/mm
grad_strength = grad_strength/425.7   # G/cm


###################################################################
       # Opens the AD2s
##################################################################

##   Hide the open_ad2 code by by left click next to the if statement
open_ad2 = 1
prt_info = 1
if open_ad2 == 1:
    dwf = cdll.dwf
    # check library loading errors, like: Adept Runtime not found
    szerr = create_string_buffer(512)
    dwf.FDwfGetLastErrorMsg(szerr)
    # declare ctype variables
    IsInUse = c_bool()
    hdwf = c_int()
    rghdwf = []
    cchannel = c_int()
    cdevices = c_int()
    voltage = c_double();
    sts = c_byte()
    hzAcq = c_double(sampFreq)  # changes sample frequency into c_double
    rgdSamples = (c_double * numSamp)()  # list for C1 on scope
    # declare string variables
    devicename = create_string_buffer(64)
    serialnum = create_string_buffer(16)
  
    # enumerate connected devices
    dwf.FDwfEnum(c_int(0), byref(cdevices))
#            print ("Number of Devices: "+str(cdevices.value))
    
    # open and configure devices
    for idevice in range(0, cdevices.value):
        dwf.FDwfEnumDeviceName(c_int(idevice), devicename)
        dwf.FDwfEnumSN(c_int(idevice), serialnum)
        if (prt_info == 1):
          print ("------------------------------")
    #              print (' idevice = ',idevice)
          print ("Device "+str(idevice+1)+" : ")
          print ('Serial Number = ',serialnum.value)
        dwf.FDwfDeviceOpen(c_int(idevice), byref(hdwf))
        if hdwf.value == 0:
            szerr = create_string_buffer(512)
            dwf.FDwfGetLastErrorMsg(szerr)
            print (szerr.value)
            dwf.FDwfDeviceCloseAll()
            sys.exit(0)
            
        rghdwf.append(hdwf.value)           
    # looks up buffer size
        cBufMax = c_int()
        dwf.FDwfAnalogInBufferSizeInfo(hdwf, 0, byref(cBufMax))
        
        dwf.FDwfEnumDeviceName(c_int(idevice), devicename)
        dwf.FDwfEnumSN(c_int(idevice), serialnum)
        hdwf.value = rghdwf[idevice]
    # configure and start clock
    hzSys = c_double()
    dwf.FDwfDigitalOutInternalClockInfo(hdwf, byref(hzSys))
#  Finished setting up multiple AD2s
#############################################################

# Setup External Scope trigger
Trig_low = .0001
Trig_high = .001
y = set_dio(0,totalCycles,Trig_low,Trig_high)

# Setup AD2 Scope trigger
Trig_low = Trig_AD2
Trig_high = Tacq
y = set_dio(4,totalCycles,Trig_low,Trig_high)


################################################################
################################################################
# Deleted the RF pulse generator from Example 1
#######   Added this code to do the custom waveform

#cSamples = 7400
pulse_time = int((predelay + Tp) * sampFreq)
# trapezoid 
ramp = int(grad_ramp * sampFreq)
hold = int(grad_hold * sampFreq)
acq_start = int((TE - Tacq/2) * sampFreq)
dephase_t = int(hold / 2)
slope_dephase = (scale_factor * grad_amp) / ramp
slope_acq = grad_amp / ramp


cSamples = int(TR * sampFreq)
#hdwf = c_int()
rgdSamples2 = (c_double*cSamples)()

channel = c_int(1)   ### changed to channel 2

set_pos_powersupply(5)
              
checkpoint = 0       
for i in range(cSamples):
    if i < pulse_time: # low until first pulse over
        rgdSamples2[i] = 0
    elif i < pulse_time + ramp: # dephase ramp up
        rgdSamples2[i] = slope_dephase * (i - pulse_time)
    elif i < pulse_time + ramp + hold/2: # dephase
        rgdSamples2[i] = scale_factor * grad_amp
    elif i < pulse_time + 2*ramp + hold/2: # dephase ramp down
        rgdSamples2[i] = -1 * slope_dephase * (i - (pulse_time + 2*ramp + dephase_t))
    elif i < acq_start - ramp: # hold low
        rgdSamples2[i] = 0
    elif i < acq_start: # ramp up to acq
        rgdSamples2[i] = slope_acq * (i - (acq_start - ramp))
    elif i < acq_start + hold: # acq grad
        rgdSamples2[i] = grad_amp
    elif i < acq_start + hold + ramp: # ramp down from acq
        rgdSamples2[i] = -1 * slope_acq * (i - (acq_start + ramp + hold))
    else:
        rgdSamples2[i] = 0
            
t = np.arange(cSamples) / sampFreq

# convert ctypes array to numpy for easier plotting
rgd_np = np.array(rgdSamples2)

# plot
plt.figure()
plt.plot(t, rgd_np)
plt.title("Gradient Waveform rgdSamples2 Over Time")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (arb units)")
plt.grid(True)
plt.xlim(0, 0.02)
plt.show()



    
# for f in f_range:
#     rgd_avg = np.zeros(numSamp)
#     for i in range(num_avg):
#         start_time = time.time()
#         print("Generating custom waveform...")
#         dwf.FDwfAnalogOutNodeEnableSet(hdwf, channel, AnalogOutNodeCarrier, c_int(1))
#         dwf.FDwfAnalogOutNodeFunctionSet(hdwf, channel, AnalogOutNodeCarrier, funcCustom) 
#         dwf.FDwfAnalogOutNodeDataSet(hdwf, channel, AnalogOutNodeCarrier, rgdSamples2, c_int(cSamples))
#         dwf.FDwfAnalogOutNodeFrequencySet(hdwf, channel, AnalogOutNodeCarrier, c_double(trap_freq)) 
#         #dwf.FDwfAnalogOutNodeAmplitudeSet(hdwf, channel, AnalogOutNodeCarrier, c_double(2.0)) 
        
#         dwf.FDwfAnalogOutRunSet(hdwf, channel, c_double(trap_total_sec)) # run for 2 periods   CHANGED TO 1 PERIOD
#         dwf.FDwfAnalogOutWaitSet(hdwf, channel, c_double(t_start)) # wait one pulse time # CHANGED 
#         dwf.FDwfAnalogOutRepeatSet(hdwf, channel, c_int(1)) # repeat 3 times  I CHANGED THIS TO 1
#         dwf.FDwfAnalogOutTriggerSourceSet(hdwf, channel, trigsrcDigitalOut)  # sets the trigger source
#         #dwf.FDwfAnalogOutConfigure(hdwf, channel, c_int(1))    # This is in "arm_analog" function
        
#         ########################################################################
#         ########################################################################
#         set_dio(2,totalCycles,att_start,att_end)
#         set_dio(3,totalCycles,0.002,T_R)   #to extend to both pulses
        
        
#         # set up acquisition (scope) (Lab 2)
#         delay = 0.0
#         amp_list = np.linspace(1,5,10)
            
            
#         y1 = set_wavegen(0,f,amplitude,Tp,predelay,Npulse)  ####### Added this line
#         y1 = set_scope(sampFreq,numSamp,Tacq,delay)
#         y2 = set_wavegen(1, f - IF, amplitude, tLO, LO_start, 1)
    
#     # Arm the analog and digital sections 
    
#         dwell = 1.0 / sampFreq
#         time2 = []
#         for i in range(0,numSamp):
#             time2.append(i*dwell)
        
        
#          ## Arming AD2
#         y1 = arm_dio(SeqTime)
#         y1 = arm_analog()  
        
#         time_passed = time.time() - start_time
#         time.sleep(max(0, TR - time_passed)) 
         
#          # Time stuff
#         now = datetime.now()
#         print(now) 
         
#         print("going to trigger")
#         y1 = trigger_and_read_ch0(rgdSamples,numSamp)
#         print("back from trigger")
#         rgd_avg = rgd_avg + rgdSamples[:]
#     rgd_avg = rgd_avg / num_avg
#     Tacqms = Tacq * 1000
#     # plt.plot(time2, rgd_avg)
#     now = str(now)
#     f_string = str(f)
         
#     ## Labels

    
#     ## fft stuff
#     sig= list(rgd_avg)
#     T = numSamp
#     limts = [IF - 5000, IF + 5000]

#     sos = signal.butter(2,limts,'bandpass', fs = sampFreq,output = 'sos')
#     filtered = signal.sosfilt(sos, sig)  
#     fft_values = np.fft.fft(filtered)
    
#     N = len(sig)
    
    
#     freq = np.fft.fftfreq(N,1/sampFreq)
    
#     magnitude = np.abs(fft_values)
    
#     plt.subplot(2,1,1)
#     plt.plot(time2, filtered)
#     plt.title('Eric and Matthew '+ now + 'frequency: ' + f_string)
    
#     plt.xlabel('Time (sec)')
#     plt.ylabel('Amplitude (V)')
    
#     plt.subplot(2,1,2)
#     plt.plot(freq[:N//2]/1000,magnitude[:N//2])
#     plt.title('FFT of signal @ ' + f_string)
#     plt.xlabel('Frequency (kHz)')
#     plt.ylabel('Magnitude')
#     plt.xlim(80,120)
#     plt.ylim(0, 2)
    
#     np.savetxt("signal.csv" + f_string,filtered,delimiter=",",fmt ="%d")
#     print('CSV file created succesfully')
    
    
    
#     plt.tight_layout()
#     plt.show()
        
        
# y1 = reset_and_close()
